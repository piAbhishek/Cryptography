Practical Assignment 3. Implement the following functions during Key Expansion in AES-128: 
(a) Rotate Word: Consider an array of 4-bytes as a word and shift each byte to the left with wrapping. 
(b) Substitute Word: Consider each byte in the word and substitute another byte for it.



#include<stdio.h>
#include<stdlib.h>
#include<math.h>

unsigned int sbox[16][16] =   {
  //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

int Rcon[10]={2,4,8,16,32,64,128,27,54,108};

int O_key[128]={0};
unsigned int keys[16];
int w[11][4][4];
int b[4];
int bin[8]={0};
int sbyte[8]={0};

void key()
{
	for(int i=0;i<128;i++)
	{
		O_key[i]=rand()%2;
	}
	int x[8]={0};
	int l,sum;
	for(int i=0;i<16;i++)
	{
		l=0;
		sum=0;
		for(int j=(8+(i*8))-1;j>=(i*8);j--)
		{
			x[l]=O_key[j];
			l++;
		}
		for(int j=0;j<8;j++)
		{
			sum=sum+(x[j]*pow(2,j));
		}
		keys[i]=sum;
	}
}

int binary_to_decimal(int n[])
{
	int s=0,a[8],j=0;
	for(int i=7;i>=0;i--)
	{
		a[j]=n[i];
		j++;
	}
	for(int i=0;i<8;i++)
	{
		s=s+(a[i]*pow(2,i));
	}
	return s;
}

void decimal_to_binary(int n)
{
	int a[64],b_count=0;
	for(int i=0;i<8;i++)
	{
		if(n!=0)
		{
			int r=n%2;
			a[i]=r;
			n=n/2;
		}
		else
		{
			a[i]=0;
		}
	}
	for(int j=7;j>=0;j--)
	{
		bin[b_count]=a[j];
		b_count++;
	}
}
void sub_bytes(int a1[])
{
	int a2[8],k=0;
	int I[8][8]={
	1,0,0,0,1,1,1,1,
	1,1,0,0,0,1,1,1,
	1,1,1,0,0,0,1,1,
	1,1,1,1,0,0,0,1,
	1,1,1,1,1,0,0,0,
	0,1,1,1,1,1,0,0,
	0,0,1,1,1,1,1,0,
	0,0,0,1,1,1,1,1};
	int I1[8]={1,1,0,0,0,1,1,0};
	for(int i=0;i<8;i++)
	{
		int sum=0;
		for(int j=0;j<8;j++)
		{
			sum=sum+I[i][j]*a1[j];
		}
		a2[k]=sum;
		k++;
	}
	for(int i=0;i<8;i++)
	{
		a1[i]=a2[i]+I1[i];
	}
}

void XOR(int a[],int b[])
{
	for(int i=0;i<8;i++)
	{
		if(a[i]==b[i])
		{
			a[i]=0;
		}
		else
		{
			a[i]=1;
		}
	}
}

void g(int a[],int r)
{
	int s;
	int db[8];
	s=a[0];
	int R;
	for(int i=0;i<3;i++)
	{
		a[i]=a[i+1];
	}
	a[3]=s;
	for(int i=0;i<4;i++)
	{
		int row=0,col=0,n=0,sb=0;
		int rc[8];
		int rcon;
		n=a[i];
		col=(n%16)-1;
		n=n/16;
		row=(n%16)-1;
		sb=sbox[row][col];
		decimal_to_binary(sb);
		if(i==0)
		{
			rcon=Rcon[r];
		}
		else
		{
			rcon=0;
		}
		for(int j=0;j<8;j++)
		{
			db[j]=bin[j];
		}
		decimal_to_binary(rcon);
		for(int j=0;j<8;j++)
		{
			rc[j]=bin[j];
		}
		XOR(db,rc);
		b[i]=binary_to_decimal(db);
	}
}

void key_expansion()
{
	int db[8];
	int s[8];
	int a[4];
	for(int i=0;i<4;i++)
	{
		for(int j=0;j<4;j++)
		{
			w[0][i][j]=keys[j+(i*4)];
		}
	}
	for(int l=1;l<=10;l++)
	{
		for(int i=0;i<4;i++)
		{
			if(i==0)
			{
				for(int k=0;k<4;k++)
				{
					a[k]=w[0][i][k];
				}
				g(w[l-1][(i+1)*4-1],l-1);
				for(int j=0;j<4;j++)
				{
					decimal_to_binary(b[j]);
					for(int k=0;k<8;k++)
					{
						db[k]=bin[k];
					}
					decimal_to_binary(a[j]);
					for(int k=0;k<8;k++)
					{
						s[k]=bin[k];
					}
					XOR(s,db);
					w[l][i][j]=binary_to_decimal(s);
				}
			}
			else
			{
				for(int k=0;k<4;k++)
				{
					a[k]=w[l-1][i][k];
				}
				for(int k=0;k<4;k++)
				{
					b[k]=w[l][i-1][k];
				}
				for(int j=0;j<4;j++)
				{
					decimal_to_binary(b[j]);
					for(int k=0;k<8;k++)
					{
						db[k]=bin[k];
					}
					decimal_to_binary(a[j]);
					for(int k=0;k<8;k++)
					{
						s[k]=bin[k];
					}
					XOR(s,db);
					w[l][i][j]=binary_to_decimal(s);
				}
			}
		}
	}
}

main()
{
	key();
	for(int i=0;i<128;i++)
	{
		printf("%d",O_key[i]);
		if((i+1)%8==0)
		{
			printf("\n");
		}
	}
	printf("\n");
	for(int i=0;i<16;i++)
	{
		printf("%x  ",keys[i]);
	}
	key_expansion();
	printf("\n");
	for(int i=0;i<11;i++)
	{
		printf("key%d:",i);
		printf("\n");
		for(int j=0;j<4;j++)
		{
			for(int k=0;k<4;k++)
			{
				printf("%d ",w[i][j][k]);
			}
			printf("\n");
		}
		printf("\n");
	}
}
