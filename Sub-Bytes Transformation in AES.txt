Practical Assignment 4: Implement the following functions during SubBytes Trasnsformation in AES: 
(a) ByteToMatrix function: A byte into an 8 × 1 column matrix. 
(b) MatrixToByte function: An 8 × 1 column matrix into a Byte.



#include<stdio.h>
#include<math.h>
#include<stdlib.h>

unsigned int sbox[16][16] =   {
  //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

unsigned int inv_sbox[16][16]= {
   //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

int Rcon[10]={2,4,8,16,32,64,128,27,54,108};

int O_key[128]={0};
int keys[16];
int w[11][4][4];
int b[4];
int bin[8]={0};
int string_txt[128]={0};
int plain_txt[4][4]={0};
int c_txt[4][4]={0};
int ci_txt[4][4]={0};
int rp_txt[4][4]={0};

void string_to_binary(char st[])
{
    int n[8],b[128],k=0;
    for(int i=0;i<16;i++)
    {
        int l=0;
        n[i]=st[i];
        int n1=n[i];
        while(n1!=0)
        {
            b[l]=n1%2;
            n1=n1/2;
            l++;
        }
        while(l!=8)
        {
            b[l]=0;
            l++;
        }
        for(int j=l-1;j>=0;j--)
        {
            string_txt[k]=b[j];
            k++;
        }
    }
}

void key()
{
    for(int i=0;i<128;i++)
    {
        O_key[i]=rand()%2;
    }
    int x[8]={0};
    int l,sum;
    for(int i=0;i<16;i++)
    {
        l=0;
        sum=0;
        for(int j=(8+(i*8))-1;j>=(i*8);j--)
        {
            x[l]=O_key[j];
            l++;
        }
        for(int j=0;j<8;j++)
        {
            sum=sum+(x[j]*pow(2,j));
        }
        keys[i]=sum;
    }
}


int binary_to_decimal(int n[])
{
    int s=0,a[8],j=0;
    for(int i=7;i>=0;i--)
    {
        a[j]=n[i];
        j++;
    }
    for(int i=0;i<8;i++)
    {
        s=s+(a[i]*pow(2,i));
    }
    return s;
}

void decimal_to_binary(int n)
{
    int a[64],b_count=0;
    for(int i=0;i<8;i++)
    {
        if(n!=0)
        {
            int r=n%2;
            a[i]=r;
            n=n/2;
        }
        else
        {
            a[i]=0;
        }
    }
    for(int j=7;j>=0;j--)
    {
        bin[b_count]=a[j];
        b_count++;
    }
}

void XOR(int a[],int b[])
{
    for(int i=0;i<8;i++)
    {
        if(a[i]==b[i])
        {
            a[i]=0;
        }
        else
        {
            a[i]=1;
        }
    }
}

void g(int a[],int r)
{
    int s;
    int db[8];
    s=a[0];
    int R;
    for(int i=0;i<3;i++)
    {
        a[i]=a[i+1];
    }
    a[3]=s;
    for(int i=0;i<4;i++)
    {
        int row=0,col=0,n=0,sb=0;
        int rc[8];
        int rcon;
        n=a[i];
        col=(n%16)-1;
        n=n/16;
        row=(n%16)-1;
        sb=sbox[row][col];
        decimal_to_binary(sb);
        if(i==0)
        {
            rcon=Rcon[r];
        }
        else
        {
            rcon=0;
        }
        for(int j=0;j<8;j++)
        {
            db[j]=bin[j];
        }
        decimal_to_binary(rcon);
        for(int j=0;j<8;j++)
        {
            rc[j]=bin[j];
        }
        XOR(db,rc);
        b[i]=binary_to_decimal(db);
    }
}

void key_ex()
{
    int db[8];
    int s[8];
    int a[4];
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
            w[0][i][j]=keys[j+(i*4)];
        }
    }
    for(int l=1;l<=10;l++)
    {
        for(int i=0;i<4;i++)
        {
            if(i==0)
            {
                for(int k=0;k<4;k++)
                {
                    a[k]=w[0][i][k];
                }
                g(w[l-1][(i+1)*4-1],l-1);
                for(int j=0;j<4;j++)
                {
                    decimal_to_binary(b[j]);
                    for(int k=0;k<8;k++)
                    {
                        db[k]=bin[k];
                    }
                    decimal_to_binary(a[j]);
                    for(int k=0;k<8;k++)
                    {
                        s[k]=bin[k];
                    }
                    XOR(s,db);
                    w[l][i][j]=binary_to_decimal(s);
                }
            }
            else
            {
                for(int k=0;k<4;k++)
                {
                    a[k]=w[l-1][i][k];
                }
                for(int k=0;k<4;k++)
                {
                    b[k]=w[l][i-1][k];
                }
                for(int j=0;j<4;j++)
                {
                    decimal_to_binary(b[j]);
                    for(int k=0;k<8;k++)
                    {
                        db[k]=bin[k];
                    }
                    decimal_to_binary(a[j]);
                    for(int k=0;k<8;k++)
                    {
                        s[k]=bin[k];
                    }
                    XOR(s,db);
                    w[l][i][j]=binary_to_decimal(s);
                }
            }
        }
    }
}

void round_key(int a[][4],int b[][4])
{
    
    for(int i=0;i<4;i++)
    {
        int ae[8]={0},ke[8]={0};
        for(int j=0;j<4;j++)
        {
            int n=a[i][j];
            decimal_to_binary(n);
            for(int k=0;k<8;k++)
            {
                ae[k]=bin[k];
            }
            decimal_to_binary(b[i][j]);
            for(int k=0;k<8;k++)
            {
                ke[k]=bin[k];
            }
            XOR(ae,ke);
            c_txt[i][j]=binary_to_decimal(ae);
        }
    }
}
void shift_row(int a[][4])
{
    int s;
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<i;j++)
        {
            s=a[i][0];
            for(int k=0;k<3;k++)
            {
                a[i][k]=a[i][k+1];
            }
            a[i][3]=s;
        }
    }
}

void mix_col(int a[])
{
    int I[4][4]={
    2,3,1,1,
    1,2,3,1,
    1,1,2,3,
    3,1,1,2
    };
    int s[4];
    int sum[4];
    for(int i=0;i<4;i++)
    {
        int x[8]={0},y[8]={0};
        for(int j=0;j<4;j++)
        {
            sum[j]=(I[i][j]*a[j]);
        }
        decimal_to_binary(sum[0]);
        for(int j=0;j<8;j++)
        {
            x[j]=bin[j];
        }
        for(int j=1;j<4;j++)
        {
            decimal_to_binary(sum[j]);
            for(int k=0;k<8;k++)
            {
                y[k]=bin[k];
            }
            XOR(x,y);
        }
        s[i]=binary_to_decimal(x);
    }
    for(int i=0;i<4;i++)
    {
        a[i]=s[i];
    }
}

void AES_en()
{
    int sub[8]={0};
    int row=0,col=0;
    int n=0;
    int sb=0;
    round_key(plain_txt,w[0]);
    for(int i=1;i<=9;i++)
    {
        for(int j=0;j<4;j++)
        {
            for(int k=0;k<4;k++)
            {
                n=c_txt[j][k];
                col=(n-1)%16;
                n=n/16;
                row=(n-1)%16;
                sb=sbox[row][col];
                ci_txt[j][k]=sb;
            }
        }
        shift_row(ci_txt);
        for(int j=0;j<4;j++)
        {
            mix_col(ci_txt[j]);
        }
        round_key(ci_txt,w[i]);
    }
    for(int j=0;j<4;j++)
    {
        for(int k=0;k<4;k++)
        {
            n=c_txt[j][k];
            col=(n-1)%16;
            n=n/16;
            row=(n-1)%16;
            sb=sbox[row][col];
            ci_txt[j][k]=sb;
        }
    }
    shift_row(ci_txt);
    round_key(ci_txt,w[10]);
}

main()
{
    int cipher_txt[4][4];
    key();
    key_ex();
    int pt[16];
    char string[100];
    printf("Enter the plain text:");
    gets(string);
    string_to_binary(string);
    for(int i=0;i<16;i++)
    {
        int a[8]={0},k=0;
        for(int j=0+(8*i);j<8+(i*8);j++)
        {
            a[k]=string_txt[j];
            k++;
        }
        pt[i]=binary_to_decimal(a);
    }
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
            plain_txt[i][j]=pt[j+(4*i)];
        }
    }
    AES_en();
    printf("\nChipher text in hex decimal form:\n");
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
            printf("%c ",c_txt[i][j]);
        }
        printf("\n");
    }
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
            cipher_txt[i][j]=c_txt[i][j];
        }
    }
}
