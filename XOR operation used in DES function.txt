Practical Assignment 1: Implement XOR operation used in DES function.



#include<stdio.h>
#include<string.h>
#include<math.h>

int keys[16][48];
int bin[64],b_count=0;
int ct[64][64]={0},rpt[64][64]={0};
int txt[64]={0};
int string_txt[64]={0};
int pt[64][64]={0};
int count=0;
char s_txt[100]="NULL";

int O_key [64] = {
	0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,
	0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1,
	1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1
};
int PC1[56] = {
	  57, 49, 41, 33, 25, 17,  9,
	   1, 58, 50, 42, 34, 26, 18,
	  10,  2, 59, 51, 43, 35, 27,
	  19, 11,  3, 60, 52, 44, 36,
	  63, 55, 47, 39, 31, 23, 15,
	   7, 62, 54, 46, 38, 30, 22,
	  14,  6, 61, 53, 45, 37, 29,
	  21, 13,  5, 28, 20, 12,  4
};
 
int PC2[48] = {
	  14, 17, 11, 24,  1,  5,
	   3, 28, 15,  6, 21, 10,
	  23, 19, 12,  4, 26,  8,
	  16,  7, 27, 20, 13,  2,
	  41, 52, 31, 37, 47, 55,
	  30, 40, 51, 45, 33, 48,
	  44, 49, 39, 56, 34, 53,
	  46, 42, 50, 36, 29, 32
};

// The initial permutation table 
int ip[64] = { 
	58,50,42,34,26,18,10,2, 
	60,52,44,36,28,20,12,4, 
	62,54,46,38,30,22,14,6, 
	64,56,48,40,32,24,16,8, 
	57,49,41,33,25,17,9,1, 
	59,51,43,35,27,19,11,3, 
	61,53,45,37,29,21,13,5, 
	63,55,47,39,31,23,15,7 
}; 

// The expansion table
int et[48] = { 
	32,1,2,3,4,5,4,5, 
	6,7,8,9,8,9,10,11, 
	12,13,12,13,14,15,16,17, 
	16,17,18,19,20,21,20,21, 
	22,23,24,25,24,25,26,27, 
	28,29,28,29,30,31,32,1 
};
	
int s_box[8][4][16]=  
	{{ 
        14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7, 
        0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8, 
        4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0, 
        15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13 
    }, 
    { 
        15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10, 
        3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5, 
        0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15, 
        13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9 
    }, 
    { 
        10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8, 
        13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1, 
        13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7, 
        1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12 
    }, 
    { 
        7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15, 
        13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9, 
        10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4, 
        3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14 
    }, 
    { 
        2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9, 
        14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6, 
        4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14, 
        11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3 
    }, 
    { 
        12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11, 
        10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8, 
        9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6, 
        4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13 
    }, 
    { 
        4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1, 
        13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6, 
        1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2, 
        6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12 
    }, 
    { 
        13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7, 
        1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2, 
        7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8, 
        2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11 
    }};
    
// The permutation table
	int ptable[32] = { 
	16,7,20,21,29,12,28,17, 
	1,15,23,26,5,18,31,10, 
	2,8,24,14,32,27,3,9,
	19,13,30,6,22,11,4,25 
	};

int inv_per[64]= { 
	40,8,48,16,56,24,64,32, 
	39,7,47,15,55,23,63,31, 
	38,6,46,14,54,22,62,30, 
	37,5,45,13,53,21,61,29, 
	36,4,44,12,52,20,60,28, 
	35,3,43,11,51,19,59,27, 
	34,2,42,10,50,18,58,26, 
	33,1,41,9,49,17,57,25 
	};

void string_to_binary(char st[])
{
	int n[8],b[64],k=0;
	for(int i=0;i<8;i++)
	{
		int l=0;
		n[i]=st[i];
		int n1=n[i];
		while(n1!=0)
		{
			b[l]=n1%2;
			n1=n1/2;
			l++;
		}
		while(l!=8)
		{
			b[l]=0;
			l++;
		}
		for(int j=l-1;j>=0;j--)
		{
			string_txt[k]=b[j];
			k++;
		}
	}
}

void binary_to_string(int a[])
{
	int m=0,n[8];
	for(int i=1;i<=8;i++)
	{
		int c=0,sum=0;
		for(int j=(8*i)-1;j>=(8*i)-8;j--)
		{
			sum=sum+a[j]*pow(2,c);
			c++;
		}
		n[m]=sum;
		s_txt[m]=n[m];
		m++;
	}
}

int binary_to_decimal(int n)
{
	int s=0,i=0;
	while(n!=0)
	{
		int r=n%10;
		s=s+(r*pow(r,i));
		i++;
		n=n/10;
	}
	return s;
}

void left_shift_1(int a[])
{
	int n=a[0];
	for(int i=0;i<27;i++)
	{
		a[i]=a[i+1];
	}
	a[27]=n;
}
void left_shift_2(int a[])
{
	for(int i=0;i<2;i++)
	{
		int n=a[0];
		for(int j=0;j<27;j++)
		{
			a[i]=a[i+1];
		}
		a[27]=n;
	}
}

void XOR(int a[],int b[])
{
	for(int i=0;i<48;i++)
	{
		if(a[i]==b[i])
		{
			a[i]=0;
		}
		else
		{
			a[i]=1;
		}
	}
}

void decimal_to_binary(int n)
{
	int a[64],b_count=0;
	for(int i=0;i<4;i++)
	{
		if(n!=0)
		{
			int r=n%2;
			a[i]=r;
			n=n/2;
		}
		else
		{
			a[i]=0;
		}
	}
	for(int j=3;j>=0;j--)
	{
		bin[b_count]=a[j];
		b_count++;
	}
}

void swap(int a[],int b[])
{
	int t[32];
	for(int i=0;i<32;i++)
	{
		t[i]=b[i];
		b[i]=a[i];
		a[i]=t[i];
	}
}

void inverse_key()
{
	int rev_key[16][48],c=0;
	for(int i=15;i>=0;i--)
	{
		for(int j=0;j<48;j++)
		{
			rev_key[c][j]=keys[i][j];
		}
		c++;
	}
	for(int i=0;i<16;i++)
	{
		for(int j=0;j<48;j++)
		{
			keys[i][j]=rev_key[i][j];
		}
		
	}
}

int key(int k[])
{
	int new_key[64];
	for(int i=0;i<64;i++)
	{
		new_key[i]=k[i];
	}
	int p1_key[56],p2_key[48];
	//Compressing the key using the PC1 table
	for(int i=0;i<56;i++)
	{
		p1_key[i]=new_key[PC1[i]-1];
	}
	int l_key[28],r_key[28];
	for(int i=0;i<28;i++)
	{
		l_key[i]=p1_key[i];
		r_key[i]=p1_key[i+28];
	}
	// 16 sub keys
	for(int i=0;i<16;i++)
	{
		if(i==0||i==1||i==8||i==16)
		{
			left_shift_1(l_key);
			left_shift_1(r_key);
		}
		else
		{
			left_shift_2(l_key);
			left_shift_2(r_key);
		}
		// Combining left and right half key
			int c_key[56];
			for(int i=0;i<28;i++)
			{
				c_key[i]=l_key[i];
				c_key[i+28]=r_key[i];
			}
		//Compressing the key using the PC2 table
			for(int i=0;i<48;i++)
			{
				p2_key[i]=c_key[PC2[i]-1];
			}
			for(int i=0;i<48;i++)
			{
				k[i]=p2_key[i];
			}
			//Storing the sub-keys
			for(int j=0;j<48;j++)
			{
				keys[count][j]=k[j];
			}
			count++;
	}
}
void des(int p[])
{
	int IP[64];
	for(int i=0;i<64;i++)
	{
		IP[i]=p[ip[i]-1];
	}
	int ls[32],rs[32];
	for(int i=0;i<32;i++)
	{
		ls[i]=IP[i];
		rs[i]=IP[i+32];
	}
	for(int l=0;l<16;l++)
	{
		int re[48];
		for(int i=0;i<48;i++)
		{
			re[i]=rs[et[i]-1];
		}
		
		XOR(re,keys[l]);
		int res[32];
		int a_count=0;
		for(int i=0;i<8;i++)
		{
			int row1=(re[i*6]*10)+re[i*6+5];
			int row=binary_to_decimal(row1);
			int col1=(re[i*6+1]*10)+re[i*6+2];
			int col=binary_to_decimal(col1);
			int val=s_box[i][row][col];
			decimal_to_binary(val);
			for(int j=0;j<4;j++)
			{
				res[a_count]=bin[j];
				a_count++;
			}
		}
		int premu[32];
		for(int i=0;i<32;i++)
		{
			premu[i]=res[ptable[i]-1];
		}
		XOR(premu,ls);
		for(int i=0;i<32;i++)
		{
			ls[i]=premu[i];
		}
		if(l<15)
		{
			swap(ls,rs);
		}
	}
	int com_txt[64];
	for(int i=0;i<32;i++)
	{
		com_txt[i]=ls[i];
		com_txt[i+32]=rs[i];
	}
	for(int i=0;i<64;i++)
	{
		txt[i]=com_txt[inv_per[i]-1];
	}
}

int main()
{
	int flag=0,len,loop;
	char s[100],c_txt[100]="NULL",rp_txt[100]="NULL";
	char string[9]="Null";
	key(O_key);
	printf("Enter the plain text:");
	gets(s);
	len=strlen(s);
	if(len%8==0)
	{
		loop=len/8;
	}
	else
	{
		loop=(len/8)+1;
	}
	int k1=0;
	for(int l=1;l<=loop;l++)
	{
		int k=0;
		for(int i=(l*8)-8;i<l*8;i++)
		{
			string[k]=s[i];
			k++;
		}
		string_to_binary(string);
		for(int i=0;i<64;i++)
		{
			pt[l][i]=string_txt[i];
		}
		des(pt[l]);
		for(int i=0;i<64;i++)
		{
			ct[l][i]=txt[i];
		}
		binary_to_string(ct[l]);
		for(int i=0;i<8;i++)
		{
			c_txt[k1]=s_txt[i];
			k1++;
		}
	}
	printf("\n\nCipher text:");
	puts(c_txt);
	inverse_key();
	int k2=0;
	for(int l=1;l<=loop;l++)
	{
		des(ct[l]);
		for(int i=0;i<64;i++)
		{
			rpt[l][i]=txt[i];
		}
		binary_to_string(rpt[l]);
		for(int i=0;i<8;i++)
		{
			rp_txt[k2]=s_txt[i];
			k2++;
		}
	}
	printf("\n\nRetrive plain text:");
	puts(rp_txt);
}
