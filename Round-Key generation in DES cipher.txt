Practical Assignment 2: Implement Round-Key generation in DES cipher



#include<stdio.h>
int keys[16][48];
int count=0;
int O_key [64] = {
	0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,
	0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1,
	1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1
};
int PC1[56] = {
	  57, 49, 41, 33, 25, 17,  9,
	   1, 58, 50, 42, 34, 26, 18,
	  10,  2, 59, 51, 43, 35, 27,
	  19, 11,  3, 60, 52, 44, 36,
	  63, 55, 47, 39, 31, 23, 15,
	   7, 62, 54, 46, 38, 30, 22,
	  14,  6, 61, 53, 45, 37, 29,
	  21, 13,  5, 28, 20, 12,  4
};
 
int PC2[48] = {
	  14, 17, 11, 24,  1,  5,
	   3, 28, 15,  6, 21, 10,
	  23, 19, 12,  4, 26,  8,
	  16,  7, 27, 20, 13,  2,
	  41, 52, 31, 37, 47, 55,
	  30, 40, 51, 45, 33, 48,
	  44, 49, 39, 56, 34, 53,
	  46, 42, 50, 36, 29, 32
};

void left_shift_1(int a[])
{
	int n=a[0];
	for(int i=0;i<27;i++)
	{
		a[i]=a[i+1];
	}
	a[27]=n;
}
void left_shift_2(int a[])
{
	for(int i=0;i<2;i++)
	{
		int n=a[0];
		for(int j=0;j<27;j++)
		{
			a[i]=a[i+1];
		}
		a[27]=n;
	}
}

int key(int k[])
{
	int new_key[64];
	for(int i=0;i<64;i++)
	{
		new_key[i]=k[i];
	}
	int p1_key[56],p2_key[48];
	//Compressing the key using the PC1 table
	for(int i=0;i<56;i++)
	{
		p1_key[i]=new_key[PC1[i]-1];
	}
	int l_key[28],r_key[28];
	for(int i=0;i<28;i++)
	{
		l_key[i]=p1_key[i];
		r_key[i]=p1_key[i+28];
	}
	// 16 sub keys
	for(int i=0;i<16;i++)
	{
		int l1[28],r1[28];
		if(i==0||i==1||i==8||i==15)
		{
			left_shift_1(l_key);
			left_shift_1(r_key);
		}
		else
		{
			left_shift_2(l_key);
			left_shift_2(r_key);
		}
		// Combining left and right half key
			int c_key[56];
			for(int i=0;i<28;i++)
			{
				c_key[i]=l_key[i];
				c_key[i+28]=r_key[i];
			}
		//Compressing the key using the PC2 table
			for(int i=0;i<48;i++)
			{
				p2_key[i]=c_key[PC2[i]-1];
			}
			for(int i=0;i<48;i++)
			{
				k[i]=p2_key[i];
			}
			//Storing the sub-key
			for(int j=0;j<48;j++)
			{
				keys[count][j]=k[j];
			}
			count++;
	}
}
int main()
{
	printf("Original key:");
	for(int i=0;i<64;i++)
	{
		printf("%d",O_key[i]);
	}
	key(O_key);
	printf("\n\nNew generated key:\n");
		for(int i=0;i<16;i++)
		{
			for(int j=0;j<48;j++)
			{
				printf("%d",keys[i][j]);
			}
			printf("\n");
		}
}
